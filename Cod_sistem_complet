#include <lmic.h>
#include <hal/hal.h>
#include <SPI.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "DFRobot_ESP_PH.h"
#include <esp_sleep.h>

#define ONE_WIRE_BUS1 25 
#define ONE_WIRE_BUS2 22  
#define PH_PIN 33       
#define WATER_LEVEL_PIN 12
#define TURBIDITY_PIN 13   


OneWire oneWire1(ONE_WIRE_BUS1);
OneWire oneWire2(ONE_WIRE_BUS2);

DallasTemperature sensors1(&oneWire1);
DallasTemperature sensors2(&oneWire2);

DFRobot_ESP_PH ph;
#define ESPADC 4096.0   
#define ESPVOLTAGE 3300 
float voltage;


static const u1_t PROGMEM APPEUI[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
void os_getArtEui(u1_t* buf) { memcpy_P(buf, APPEUI, 8); }

static const u1_t PROGMEM DEVEUI[8] = { 0x37, 0x88, 0x06, 0xD0, 0x7E, 0xD5, 0xB3, 0x70 };
void os_getDevEui(u1_t* buf) { memcpy_P(buf, DEVEUI, 8); }

static const u1_t PROGMEM APPKEY[16] = { 0x73, 0xE0, 0x24, 0xE8, 0xF6, 0xB4, 0xEB, 0x77, 0xD9, 0xA0, 0x84, 0x75, 0xD7, 0x86, 0x42, 0xDE};
void os_getDevKey(u1_t* buf) { memcpy_P(buf, APPKEY, 16); }

RTC_DATA_ATTR int transmissionCount = 0;

const int MAX_TRANSMISSIONS = 10;
const int DEEP_SLEEP_DURATION = 600000000;

static osjob_t sendjob;
bool joined = false; 

const unsigned TX_INTERVAL = 60; 


const lmic_pinmap lmic_pins = {
    .nss = 5,
    .rxtx = LMIC_UNUSED_PIN,
    .rst = 14,
    .dio = {26, 35, LMIC_UNUSED_PIN},
};

void printHex2(unsigned v) {
    v &= 0xff;
    if (v < 16)
        Serial.print('0');
    Serial.print(v, HEX);
}

void onEvent (ev_t ev) {
    Serial.print(os_getTime());
    Serial.print(": ");
    switch(ev) {
        case EV_SCAN_TIMEOUT:
            Serial.println(F("EV_SCAN_TIMEOUT"));
            break;
        case EV_BEACON_FOUND:
            Serial.println(F("EV_BEACON_FOUND"));
            break;
        case EV_BEACON_MISSED:
            Serial.println(F("EV_BEACON_MISSED"));
            break;
        case EV_BEACON_TRACKED:
            Serial.println(F("EV_BEACON_TRACKED"));
            break;
        case EV_JOINING:
            Serial.println(F("EV_JOINING"));
            break;
        case EV_JOINED:
            Serial.println(F("EV_JOINED"));
            {
              u4_t netid = 0;
              devaddr_t devaddr = 0;
              u1_t nwkKey[16];
              u1_t artKey[16];
              LMIC_getSessionKeys(&netid, &devaddr, nwkKey, artKey);
              Serial.print("netid: ");
              Serial.println(netid, DEC);
              Serial.print("devaddr: ");
              Serial.println(devaddr, HEX);
              Serial.print("AppSKey: ");
              for (size_t i=0; i<sizeof(artKey); ++i) {
                if (i != 0)
                  Serial.print("-");
                printHex2(artKey[i]);
              }
              Serial.println("");
              Serial.print("NwkSKey: ");
              for (size_t i=0; i<sizeof(nwkKey); ++i) {
                      if (i != 0)
                              Serial.print("-");
                      printHex2(nwkKey[i]);
              }
              Serial.println();
            }
            
            LMIC_setLinkCheckMode(0);
            break;
        case EV_JOIN_FAILED:
            Serial.println(F("EV_JOIN_FAILED"));
            break;
        case EV_REJOIN_FAILED:
            Serial.println(F("EV_REJOIN_FAILED"));
            break;
        case EV_TXCOMPLETE:
            Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
            if (LMIC.txrxFlags & TXRX_ACK)
              Serial.println(F("Received ack"));
            if (LMIC.dataLen) {
              Serial.print(F("Received "));
              Serial.print(LMIC.dataLen);
              Serial.println(F(" bytes of payload"));
            }
            
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
            break;
        case EV_LOST_TSYNC:
            Serial.println(F("EV_LOST_TSYNC"));
            break;
        case EV_RESET:
            Serial.println(F("EV_RESET"));
            break;
        case EV_RXCOMPLETE:
            Serial.println(F("EV_RXCOMPLETE"));
            break;
        case EV_LINK_DEAD:
            Serial.println(F("EV_LINK_DEAD"));
            break;
        case EV_LINK_ALIVE:
            Serial.println(F("EV_LINK_ALIVE"));
            break;
        case EV_TXSTART:
            Serial.println(F("EV_TXSTART"));
            break;
        case EV_TXCANCELED:
            Serial.println(F("EV_TXCANCELED"));
            break;
        case EV_RXSTART:
            /* do not print anything -- it wrecks timing */
            break;
        case EV_JOIN_TXCOMPLETE:
            Serial.println(F("EV_JOIN_TXCOMPLETE: no JoinAccept"));
            break;

        default:
            Serial.print(F("Unknown event: "));
            Serial.println((unsigned) ev);
            break;
    }
}


void do_send(osjob_t* j) {
    if (LMIC.opmode & OP_TXRXPEND) {
        Serial.println(F("OP_TXRXPEND, not sending"));
    } else {


        sensors1.requestTemperatures();
        float temperatura1 = sensors1.getTempCByIndex(0);
        sensors2.requestTemperatures();
        float temperatura2 = sensors2.getTempCByIndex(0);

       
        voltage = analogRead(PH_PIN) / ESPADC * ESPVOLTAGE;
        float pH = ph.readPH(voltage, temperatura1);

        int nivel_apa = digitalRead(WATER_LEVEL_PIN);

         
        int turbiditate = analogRead(TURBIDITY_PIN);

      
        Serial.print("Temperatura1: ");
        Serial.println(temperatura1);
        Serial.print("Temperatura2: ");
        Serial.println(temperatura2);
        Serial.print("pH: ");
        Serial.println(pH);
        Serial.print("Nivel apa: ");
        Serial.println(nivel_apa);
        Serial.print("Turbiditate: ");
        Serial.println(turbiditate);

       
        uint8_t data[20];
        memcpy(data, &temperatura1, sizeof(float));
        memcpy(data + 4, &temperatura2, sizeof(float));
        memcpy(data + 8, &pH, sizeof(float));
        memcpy(data + 12, &nivel_apa, sizeof(int));
        memcpy(data + 16, &turbiditate, sizeof(int));

        
        LMIC_setTxData2(1, data, sizeof(data)-1, 0);
        Serial.print(F("Packet queued: "));
        Serial.print(temperatura1);
        Serial.print(", ");
        Serial.print(temperatura2);
        Serial.print(", ");
        Serial.print(pH);
        Serial.print(", ");
        Serial.print(nivel_apa);
        Serial.print(", ");
        Serial.println(turbiditate);

      
        transmissionCount++;
        Serial.print("Transmission count: ");
        Serial.println(transmissionCount);

        
        if (transmissionCount > MAX_TRANSMISSIONS) {
            Serial.println("Entering deep sleep...");
            transmissionCount = 0; 
            Serial.flush();
            esp_sleep_enable_timer_wakeup(DEEP_SLEEP_DURATION);
            esp_deep_sleep_start();
        } else {
            os_setTimedCallback(&sendjob, os_getTime() + sec2osticks(TX_INTERVAL), do_send);
        }
    }
}

void setup() {
    Serial.begin(9600);
    Serial.println(F("Starting"));

    sensors1.begin();
    sensors2.begin();
    ph.begin();
    pinMode(WATER_LEVEL_PIN, INPUT);

    #ifdef VCC_ENABLE
    pinMode(VCC_ENABLE, OUTPUT);
    digitalWrite(VCC_ENABLE, HIGH);
    delay(1000);
    #endif

    
    os_init();
    LMIC_reset();
    LMIC_startJoining();

   
    if (esp_sleep_get_wakeup_cause() == ESP_SLEEP_WAKEUP_TIMER) {
        Serial.println("Woke up from deep sleep");
    } else {
        Serial.println("Fresh start");
        transmissionCount = 0;

  
    do_send(&sendjob);
}

void loop() {
    os_runloop_once();
    if (joined && (LMIC.opmode & OP_TXRXPEND) == 0) {
        do_send(&sendjob);
        delay(1000);
    }
}
